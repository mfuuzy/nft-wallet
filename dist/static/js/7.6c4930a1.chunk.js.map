{"version":3,"sources":["assets/img/scan-error.png","components/QRcodeScaner/index.tsx"],"names":["Container","styled","div","props","undefined","width","QrcodeScaner","videoRef","React","createRef","currentDeviceId","scaner","state","nonAddressResult","isScaning","facingMode","toggle","a","startScan","navigator","mediaDevices","getSupportedConstraints","this","onDecode","onDecodeError","onScanCkbAddress","BrowserQRCodeReader","reset","listVideoInputDevices","devices","deviceId","find","d","label","toLowerCase","includes","handleResult","result","text","getText","replace","setState","verifyCkbAddress","verifyEthAddress","verifyDasAddress","stopScan","isSupportedFacingMode","decodeFromConstraints","video","current","decodeOnceFromVideoDevice","then","catch","nonCkbAddressResult","onCancel","isDrawerOpen","t","isOpen","onClose","placement","hasOverlay","contentProps","padding","backgroundColor","bodyProps","style","Appbar","left","onClick","transparent","title","right","ref","textAlign","className","lineHeight","src","ScanError","alt","Button","Component"],"mappings":"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","file":"static/js/7.6c4930a1.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/scan-error.c173f42a.png\";","/* eslint-disable @typescript-eslint/no-non-null-asserted-optional-chain */\n/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport React from 'react'\nimport { BrowserQRCodeReader, Result } from '@zxing/library/esm'\nimport { TFunction } from 'react-i18next'\nimport styled from 'styled-components'\nimport { History } from 'history'\nimport {\n  verifyCkbAddress,\n  verifyEthAddress,\n  verifyDasAddress,\n} from '../../utils'\nimport ScanError from '../../assets/img/scan-error.png'\nimport { ReactComponent as BackSvg } from '../../assets/svg/back.svg'\nimport { ReactComponent as SwitchCam } from '../../assets/svg/switch-cam.svg'\nimport { Appbar, AppbarButton } from '../Appbar'\nimport { Button } from '../Button'\nimport { Drawer } from '@mibao-ui/components'\n\nconst Container = styled.div`\n  display: flex;\n  height: 100%;\n  width: ${(props: { width?: number }) =>\n    props.width !== undefined ? `${props.width}px` : '375px'};\n  flex-direction: column;\n\n  video {\n    max-width: 100%;\n    margin-bottom: 20px;\n  }\n\n  p {\n    margin: 0;\n    text-align: center;\n    font-size: 14px;\n    &.white {\n      color: white;\n    }\n  }\n\n  .dot {\n    height: 5px;\n    width: 5px;\n    background-color: white;\n    border-radius: 50%;\n    display: inline-block;\n  }\n\n  .result {\n    margin: 0 36px;\n    margin-top: -44px;\n    display: flex;\n    flex: 1;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    img {\n      width: 220px;\n    }\n    p {\n      font-size: 12px;\n      line-height: 16px;\n      margin: 0;\n      margin-top: 12px;\n    }\n    .warn {\n      color: #f77d48;\n    }\n    .detect {\n      color: #4c4c4c;\n    }\n    .content {\n      color: #4c4c4c;\n      opacity: 0.8;\n    }\n\n    button {\n      margin-top: 32px;\n    }\n  }\n`\n\nexport interface QrcodeScanerProps {\n  onScanCkbAddress: (address: string) => void\n  onCancel: () => void\n  isDrawerOpen: boolean\n  onDecode?: (result: string) => void\n  onDecodeError?: ((error: string) => void) | undefined\n  onStartError?: (error: any) => void\n  width?: number\n  history: History<unknown>\n  t: TFunction<'translations'>\n}\n\nexport interface QrcodeScanerState {\n  nonAddressResult: string\n  isScaning: boolean\n}\n\n// eslint-disable-next-line prettier/prettier\nexport default class QrcodeScaner extends React.Component<QrcodeScanerProps, QrcodeScanerState> {\n  private readonly videoRef = React.createRef<HTMLVideoElement>()\n  private currentDeviceId: string | null = null\n\n  public scaner: BrowserQRCodeReader | null = null\n\n  state = {\n    nonAddressResult: '',\n    isScaning: false,\n  }\n\n  private facingMode: 'user' | 'environment' = 'environment'\n\n  private readonly toggle = async (): Promise<void> => {\n    await this.startScan(true)\n  }\n\n  private isSupportedFacingMode(): boolean {\n    return (\n      navigator?.mediaDevices?.getSupportedConstraints?.()?.facingMode ?? false\n    )\n  }\n\n  public async startScan(toggle = false): Promise<void> {\n    const { onDecode, onDecodeError, onScanCkbAddress } = this.props\n    if (this.scaner === null) {\n      this.scaner = new BrowserQRCodeReader()\n    }\n    if (toggle) {\n      this.scaner.reset()\n    }\n    const devices = await this.scaner.listVideoInputDevices()\n    let deviceId =\n      devices.find((d) => {\n        const label = d.label.toLowerCase()\n        return label.includes('back') || label.includes('后')\n      })?.deviceId ?? devices[0].deviceId\n\n    if (this.currentDeviceId === null) {\n      this.currentDeviceId = deviceId\n    }\n\n    if (toggle) {\n      deviceId =\n        devices.find((d) => d.deviceId !== this.currentDeviceId)?.deviceId ??\n        deviceId\n    }\n    this.currentDeviceId = deviceId\n    const handleResult = (result?: Result): void => {\n      if (result == null) {\n        return\n      }\n      const text = result.getText().replace(/^ethereum:/, '')\n      onDecode?.(text)\n      this.setState({ isScaning: false })\n      if (\n        verifyCkbAddress(text) ||\n        verifyEthAddress(text) ||\n        verifyDasAddress(text)\n      ) {\n        this.setState({ nonAddressResult: '' })\n        onScanCkbAddress(text)\n      } else {\n        this.setState({ nonAddressResult: text })\n      }\n      this.stopScan()\n    }\n    this.setState({ nonAddressResult: '', isScaning: true }, () => {\n      if (this.isSupportedFacingMode()) {\n        this.scaner?.decodeFromConstraints(\n          { video: { facingMode: this.facingMode } },\n          this.videoRef.current!,\n          handleResult\n        )\n        this.facingMode =\n          this.facingMode === 'environment' ? 'user' : 'environment'\n      } else {\n        this.scaner!.decodeOnceFromVideoDevice(deviceId, this.videoRef.current!)\n          .then(handleResult)\n          .catch(onDecodeError)\n      }\n    })\n  }\n\n  componentWillUnmount(): void {\n    this.stopScan()\n  }\n\n  componentDidMount(): void {\n    this.startScan()\n  }\n\n  public stopScan(): void {\n    this.scaner?.reset()\n    this.scaner = null\n    this.setState({ isScaning: false })\n  }\n\n  render(): React.ReactNode {\n    const { nonAddressResult: nonCkbAddressResult, isScaning } = this.state\n    const { onCancel, isDrawerOpen, width, t } = this.props\n    return (\n      <Drawer\n        isOpen={isDrawerOpen}\n        onClose={onCancel}\n        placement=\"left\"\n        hasOverlay\n        contentProps={{\n          padding: 0,\n          width,\n          backgroundColor: isScaning ? '#000' : '#fff',\n        }}\n        bodyProps={{\n          padding: 0,\n          width,\n        }}\n      >\n        <Container\n          width={width}\n          style={{ backgroundColor: isScaning ? '#000' : '#fff' }}\n        >\n          <Appbar\n            left={\n              <AppbarButton onClick={onCancel}>\n                <BackSvg />\n              </AppbarButton>\n            }\n            transparent\n            title={nonCkbAddressResult === '' ? '' : t('transfer.scan.result')}\n            right={\n              isScaning ? (\n                <AppbarButton onClick={this.toggle}>\n                  <SwitchCam />\n                </AppbarButton>\n              ) : null\n            }\n          />\n          {isScaning ? (\n            <>\n              <video ref={this.videoRef} />\n              <div style={{ textAlign: 'center' }}>\n                <p className=\"white\">{t('transfer.scan.qrcode')}</p>\n                <p style={{ lineHeight: '10px' }}>\n                  <span className=\"dot\"></span>\n                </p>\n              </div>\n            </>\n          ) : null}\n          {nonCkbAddressResult === '' ? null : (\n            <div className=\"result\">\n              <img src={ScanError} alt={t('transfer.scan.error')} />\n              <p className=\"warn\">{t('transfer.scan.error')}</p>\n              <p className=\"detect\">{t('transfer.scan.detected')}</p>\n              <p className=\"content\">{nonCkbAddressResult}</p>\n              <Button onClick={async () => await this.startScan()}>\n                {t('transfer.scan.rescan')}\n              </Button>\n            </div>\n          )}\n        </Container>\n      </Drawer>\n    )\n  }\n}\n"],"sourceRoot":""}